---
StartAt: GetEvent
States:
  GetEvent:
    Type: Parallel
    Next: PutEvents
    ResultSelector:
      EventBusName: ${event_bus_name}
      Source: reddit
      DetailType: post/slack/channel
      Detail:
        AWS_STEP_FUNCTIONS_STARTED_BY_EXECUTION_ID.$: $$.Execution.Id
        POST.$: $[0]
        SLACK.$: $[1]
    Branches:
      - StartAt: GetLastPost
        States:
          GetLastPost:
            Type: Task
            Resource: arn:aws:states:::aws-sdk:dynamodb:query
            Next: TransformPost
            Parameters:
              TableName: ${table_name}
              IndexName: Chrono
              Limit: 1
              ScanIndexForward: false
              KeyConditionExpression: "#SORT=:SORT"
              FilterExpression: "#STATE=:STATE AND attribute_exists(#JSON)"
              ProjectionExpression: "#CREATED_UTC,#JSON,#NAME,#PERMALINK,#TITLE,#TTL"
              ExpressionAttributeNames:
                "#CREATED_UTC": CREATED_UTC
                "#JSON": JSON
                "#NAME": NAME
                "#PERMALINK": PERMALINK
                "#SORT": SORT
                "#STATE": STATE
                "#TITLE": TITLE
                "#TTL": TTL
              ExpressionAttributeValues:
                ":SORT":
                  S: REDDIT/POST
                ":STATE":
                  S: POSTED
              ExclusiveStartKey:
                GUID:
                  S: STATS/MAX
                SORT:
                  S: REDDIT/POST
                CREATED_UTC:
                  S: "9999"
            ResultSelector:
              CREATED_UTC.$: "$.Items[0].CREATED_UTC.S"
              DATA.$: States.StringToJson($.Items[0].JSON.S)
              NAME.$: "$.Items[0].NAME.S"
              PERMALINK.$: "$.Items[0].PERMALINK.S"
              TITLE.$: "$.Items[0].TITLE.S"
              TTL.$: States.StringToJson($.Items[0].TTL.N)
          TransformPost:
            Type: Task
            Resource: arn:aws:lambda:us-west-2:556954866954:function:brutalismbot-slack-transform
            End: true
            InputPath: "$.DATA"
            ResultPath: "$.DATA"
            Retry:
              - BackoffRate: 2
                IntervalSeconds: 3
                MaxAttempts: 4
                ErrorEquals:
                  - Lambda.AWSLambdaException
                  - Lambda.SdkClientException
                  - Lambda.ServiceException
                  - Lambda.Unknown
      - StartAt: GetSlack
        States:
          GetSlack:
            Type: Pass
            End: true
            Parameters:
              ACCESS_TOKEN.$: $.access_token
              APP_ID.$: $.app_id
              CHANNEL_ID.$: $.incoming_webhook.channel_id
              CHANNEL_NAME.$: $.incoming_webhook.channel
              SCOPE.$: $.scope
              TEAM_ID.$: $.team.id
              TEAM_NAME.$: $.team.name
              USER_ID.$: $.authed_user.id
              WEBHOOK_URL.$: $.incoming_webhook.url
      - StartAt: PutAuth
        States:
          PutAuth:
            Type: Task
            Resource: arn:aws:states:::aws-sdk:dynamodb:putItem
            End: true
            Parameters:
              TableName: ${table_name}
              Item:
                SORT:
                  S: SLACK/AUTH
                ACCESS_TOKEN:
                  S.$: $.access_token
                APP_ID:
                  S.$: $.app_id
                CHANNEL_ID:
                  S.$: $.incoming_webhook.channel_id
                CHANNEL_NAME:
                  S.$: $.incoming_webhook.channel
                CREATED_UTC:
                  S.$: $$.Execution.StartTime
                ENABLED:
                  Bool: true
                GUID:
                  S.$: States.Format('{}/{}/{}', $.app_id, $.team.id, $.incoming_webhook.channel_id)
                JSON:
                  S.$: $
                SCOPE:
                  S.$: $.scope
                TEAM_ID:
                  S.$: $.team.id
                TEAM_NAME:
                  S.$: $.team.name
                USER_ID:
                  S.$: $.authed_user.id
                WEBHOOK_URL:
                  S.$: $.incoming_webhook.url
  PutEvents:
    Type: Task
    Resource: arn:aws:states:::events:putEvents
    End: true
    Parameters:
      Entries.$: States.Array($)
