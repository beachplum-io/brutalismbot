---
StartAt: GetSlack
States:
  GetSlack:
    Type: Task
    Resource: arn:aws:states:::dynamodb:getItem
    Next: AppendChannel
    ResultPath: $.SLACK
    ResultSelector:
      ACCESS_TOKEN.$: $.Item.ACCESS_TOKEN.S
      USER_ID.$: $.Item.USER_ID.S
    Parameters:
      TableName: ${table_name}
      ProjectionExpression: ACCESS_TOKEN,USER_ID
      Key:
        GUID:
          S: A020594EPJQ/THAQ99JLW/DH6UK5Q0Y
        SORT:
          S: SLACK/AUTH
  AppendChannel:
    Type: Pass
    Next: AppendControls
    InputPath: $.SLACK.USER_ID
    ResultPath: $.POST.DATA.channel
  AppendControls:
    Type: Task
    Resource: ${array_function_arn}
    Next: SendChat
    ResultPath: $.POST.DATA.blocks
    Parameters:
      array.$: $.POST.DATA.blocks
      push:
        block_id: reject
        type: actions
        elements:
          - action_id: reject
            style: danger
            type: button
            value.$: $.AWS_STEP_FUNCTIONS_STARTED_BY_EXECUTION_ID
            confirm:
              style: danger
              title:
                type: plain_text
                text: Are you sure?
              text:
                type: plain_text
                text: This cannot be undone.
              confirm:
                type: plain_text
                text: Reject
              deny:
                type: plain_text
                text: Cancel
            text:
              type: plain_text
              text: Reject
              emoji: true
    Retry:
      - BackoffRate: 2
        IntervalSeconds: 3
        MaxAttempts: 4
        ErrorEquals:
          - Lambda.AWSLambdaException
          - Lambda.SdkClientException
          - Lambda.ServiceException
          - Lambda.Unknown
  SendChat:
    Type: Task
    Resource: ${http_function_arn}
    Next: Wait
    ResultPath: $.HTTP
    ResultSelector:
      statusCode.$: $.statusCode
      headers.$: $.headers
      body.$: States.StringToJson($.body)
    Parameters:
      method: POST
      url: https://slack.com/api/chat.postMessage
      body.$: States.JsonToString($.POST.DATA)
      headers:
        authorization.$: States.Format('Bearer {}', $.SLACK.ACCESS_TOKEN)
        content-type: application/json; charset=utf-8
    Retry:
      - BackoffRate: 2
        IntervalSeconds: 3
        MaxAttempts: 4
        ErrorEquals:
          - Lambda.AWSLambdaException
          - Lambda.SdkClientException
          - Lambda.ServiceException
          - Lambda.Unknown
  Wait:
    Type: Wait
    Next: StripControls
    Seconds: ${wait_time_seconds}
  StripControls:
    Type: Task
    Resource: ${array_function_arn}
    Next: GetUpdate
    InputPath: $.POST.DATA.blocks
    ResultPath: $.POST.DATA.blocks
    Parameters:
      array.$: $
      pop: 1
    Retry:
      - BackoffRate: 2
        IntervalSeconds: 3
        MaxAttempts: 4
        ErrorEquals:
          - Lambda.AWSLambdaException
          - Lambda.SdkClientException
          - Lambda.ServiceException
          - Lambda.Unknown
  GetUpdate:
    Type: Pass
    Next: SendUpdate
    Parameters:
      url: https://slack.com/api/chat.update
      method: POST
      headers:
        authorization.$: States.Format('Bearer {}', $.SLACK.ACCESS_TOKEN)
        content-type: application/json; charset=utf-8
      body:
        channel.$: $.HTTP.body.channel
        blocks.$: $.POST.DATA.blocks
        ts.$: $.HTTP.body.ts
  SendUpdate:
    Type: Task
    Resource: ${http_function_arn}
    End: true
    Parameters:
      url.$: $.url
      method.$: $.method
      headers.$: $.headers
      body.$: States.JsonToString($.body)
    Retry:
      - BackoffRate: 2
        IntervalSeconds: 3
        MaxAttempts: 4
        ErrorEquals:
          - Lambda.AWSLambdaException
          - Lambda.SdkClientException
          - Lambda.ServiceException
          - Lambda.Unknown
