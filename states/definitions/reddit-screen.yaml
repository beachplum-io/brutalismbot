---
StartAt: GetSlack
States:
  GetSlack:
    Type: Task
    Resource: arn:aws:states:::dynamodb:getItem
    Next: AppendControls
    ResultPath: $.SLACK
    ResultSelector:
      ACCESS_TOKEN.$: $.Item.ACCESS_TOKEN.S
      CHANNEL_ID.$: $.Item.CHANNEL_ID.S
    Parameters:
      TableName: ${table_name}
      ProjectionExpression: ACCESS_TOKEN,CHANNEL_ID
      Key:
        GUID:
          S: ${app_id}/${team_id}/${conversation_id}
        SORT:
          S: SLACK/AUTH
  AppendControls:
    Type: Task
    Resource: ${array_function_arn}
    Next: Attachmentify
    ResultPath: $.POST.DATA.blocks
    Parameters:
      array.$: $.POST.DATA.blocks
      push:
        type: actions
        block_id: reject
        elements:
          - type: button
            action_id: reject
            style: danger
            value.$: $.AWS_STEP_FUNCTIONS_STARTED_BY_EXECUTION_ID
            confirm:
              style: danger
              title:
                type: plain_text
                text: Are you sure?
              text:
                type: plain_text
                text: This cannot be undone.
              confirm:
                type: plain_text
                text: Reject
              deny:
                type: plain_text
                text: Cancel
            text:
              type: plain_text
              text: Reject
              emoji: true
    Retry:
      - BackoffRate: 2
        IntervalSeconds: 3
        MaxAttempts: 4
        ErrorEquals:
          - Lambda.AWSLambdaException
          - Lambda.SdkClientException
          - Lambda.ServiceException
          - Lambda.Unknown
  Attachmentify:
    Type: Pass
    Next: SendChat
    ResultPath: $.POST.DATA
    Parameters:
      channel.$: $.SLACK.CHANNEL_ID
      attachments:
        - color: "#D55D6A"
          blocks.$: $.POST.DATA.blocks
  SendChat:
    Type: Task
    Resource: ${http_function_arn}
    Next: Wait
    ResultPath: $.HTTP
    ResultSelector:
      statusCode.$: $.statusCode
      headers.$: $.headers
      body.$: States.StringToJson($.body)
    Parameters:
      method: POST
      url: https://slack.com/api/chat.postMessage
      body.$: States.JsonToString($.POST.DATA)
      headers:
        authorization.$: States.Format('Bearer {}', $.SLACK.ACCESS_TOKEN)
        content-type: application/json; charset=utf-8
    Retry:
      - BackoffRate: 2
        IntervalSeconds: 3
        MaxAttempts: 4
        ErrorEquals:
          - Lambda.AWSLambdaException
          - Lambda.SdkClientException
          - Lambda.ServiceException
          - Lambda.Unknown
  Wait:
    Type: Wait
    Next: DeleteScreener
    Seconds: ${wait_time_seconds}
  DeleteScreener:
    Type: Task
    Resource: ${http_function_arn}
    End: true
    Parameters:
      url: https://slack.com/api/chat.delete
      method: POST
      headers:
        authorization.$: States.Format('Bearer {}', $.SLACK.ACCESS_TOKEN)
        content-type: application/json; charset=utf-8
      body:
        channel.$: $.HTTP.body.channel
        ts.$: $.HTTP.body.ts
    Retry:
      - BackoffRate: 2
        IntervalSeconds: 3
        MaxAttempts: 4
        ErrorEquals:
          - Lambda.AWSLambdaException
          - Lambda.SdkClientException
          - Lambda.ServiceException
          - Lambda.Unknown
