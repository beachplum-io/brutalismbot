---
StartAt: GetView
States:
  GetView:
    Type: Parallel
    Next: EncodeView
    ResultSelector:
      url: https://slack.com/api/views.publish
      headers:
        authorization.$: States.Format('Bearer {}', $[1].Items[0].ACCESS_TOKEN.S)
        content-type: application/json; charset=utf8
      body:
        user_id.$: $[1].Items[0].USER_ID.S
        view:
          callback_id: enable_disable
          type: home
          title:
            type: plain_text
            text: Brutalismbot Beta
            emoji: true
          blocks:
            - type: actions
              elements.$: States.Array($[0])
    Branches:
      - StartAt: GetState
        States:
          GetState:
            Type: Task
            Resource: arn:aws:states:::aws-sdk:eventbridge:describeRule
            Next: Enabled?
            Parameters:
              Name: ${reddit_dequeue_rule_name}
          Enabled?:
            Type: Choice
            Default: GetDisableButton
            Choices:
              - Next: GetEnableButton
                Variable: $.State
                StringEquals: DISABLED
          GetDisableButton:
            Type: Pass
            End: true
            Result:
              style: danger
              type: button
              value: disable
              text:
                emoji: true
                text: Disable
                type: plain_text
          GetEnableButton:
            Type: Pass
            End: true
            Result:
              style: primary
              type: button
              value: enable
              text:
                emoji: true
                text: Enable
                type: plain_text
      - StartAt: GetRequest
        States:
          GetRequest:
            Type: Task
            Resource: arn:aws:states:::aws-sdk:dynamodb:query
            End: true
            Parameters:
              TableName: ${table_name}
              IndexName: Chrono
              KeyConditionExpression: "#SORT = :SORT"
              FilterExpression: APP_ID = :APP_ID AND TEAM_ID = :TEAM_ID AND USER_ID = :USER_ID
              ProjectionExpression: ACCESS_TOKEN,USER_ID
              ExpressionAttributeNames:
                "#SORT": SORT
              ExpressionAttributeValues:
                ":SORT":
                  S: SLACK/AUTH
                ":APP_ID":
                  S.$: $.api_app_id
                ":TEAM_ID":
                  S.$: $.team_id
                ":USER_ID":
                  S.$: $.event.user
  EncodeView:
    Type: Pass
    Next: SendRequest
    Parameters:
      url.$: $.url
      headers.$: $.headers
      body:
        user_id.$: $.body.user_id
        view.$: States.JsonToString($.body.view)
  SendRequest:
    Type: Task
    Resource: ${http_function_arn}
    End: true
    ResultSelector:
      statusCode.$: $.statusCode
      headers.$: $.headers
      body.$: States.StringToJson($.body)
    Parameters:
      method: POST
      url.$: $.url
      headers.$: $.headers
      body.$: States.JsonToString($.body)
