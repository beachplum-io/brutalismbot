---
StartAt: AddChannel?
States:
  AddChannel?:
    Type: Choice
    Default: PutItem
    Choices:
      - Next: AddUser
        And:
          - Variable: $.SLACK.SCOPE
            IsPresent: true
          - Variable: $.SLACK.SCOPE
            StringMatches: "*chat:write*"
          - Variable: $.SLACK.CHANNEL_ID
            StringMatches: D*
      - Next: AddChannel
        And:
          - Variable: $.SLACK.SCOPE
            IsPresent: true
          - Variable: $.SLACK.SCOPE
            StringMatches: "*chat:write*"
  AddChannel:
    Type: Pass
    Next: PutItem
    InputPath: $.SLACK.CHANNEL_ID
    ResultPath: $.POST.DATA.channel
  AddUser:
    Type: Pass
    Next: PutItem
    InputPath: $.SLACK.USER_ID
    ResultPath: $.POST.DATA.channel
  PutItem:
    Type: Task
    Resource: arn:aws:states:::aws-sdk:dynamodb:putItem
    Next: WhichMethod?
    ResultPath: $.DYNAMODB
    Parameters:
      TableName: ${table_name}
      Item:
        SORT:
          S: SLACK/POST
        APP_ID:
          S.$: $.SLACK.APP_ID
        CHANNEL_ID:
          S.$: $.SLACK.CHANNEL_ID
        CREATED_UTC:
          S.$: $.POST.CREATED_UTC
        GUID:
          S.$: States.Format('{}/{}/{}/{}', $.SLACK.APP_ID, $.SLACK.TEAM_ID, $.SLACK.CHANNEL_ID, $.POST.NAME)
        JSON:
          S.$: $.POST.DATA
        NAME:
          S.$: $.POST.NAME
        SCOPE:
          S.$: $.SLACK.SCOPE
        TEAM_ID:
          S.$: $.SLACK.TEAM_ID
        TTL:
          N.$: States.JsonToString($.POST.TTL)
  WhichMethod?:
    Type: Choice
    Default: SendWebhook
    Choices:
      - Next: SendChat
        And:
          - Variable: $.SLACK.SCOPE
            IsPresent: true
          - Variable: $.SLACK.SCOPE
            StringMatches: "*chat:write*"
  SendChat:
    Type: Task
    Resource: ${http_function_arn}
    Next: ChatOK?
    ResultPath: $.HTTP
    ResultSelector:
      statusCode.$: $.statusCode
      headers.$: $.headers
      body.$: States.StringToJson($.body)
    Parameters:
      method: POST
      url: https://slack.com/api/chat.postMessage
      body.$: States.JsonToString($.POST.DATA)
      headers:
        authorization.$: States.Format('Bearer {}', $.SLACK.ACCESS_TOKEN)
        content-type: application/json; charset=utf-8
    Retry:
      - BackoffRate: 2
        IntervalSeconds: 3
        MaxAttempts: 4
        ErrorEquals:
          - Lambda.AWSLambdaException
          - Lambda.SdkClientException
          - Lambda.ServiceException
          - Lambda.Unknown
  ChatOK?:
    Type: Choice
    Default: SendWebhook
    Choices:
      - Next: GetChatUpdate
        And:
          - Variable: $.HTTP.body.ok
            IsPresent: true
          - Variable: $.HTTP.body.ok
            BooleanEquals: true
  SendWebhook:
    Type: Task
    Resource: ${http_function_arn}
    Next: GetWebhookUpdate
    ResultPath: $.HTTP
    Parameters:
      method: POST
      url.$: $.SLACK.WEBHOOK_URL
      body.$: States.JsonToString($.POST.DATA)
      headers:
        authorization.$: States.Format('Bearer {}', $.SLACK.ACCESS_TOKEN)
        content-type: application/json; charset=utf-8
    Retry:
      - BackoffRate: 2
        IntervalSeconds: 3
        MaxAttempts: 4
        ErrorEquals:
          - Lambda.AWSLambdaException
          - Lambda.SdkClientException
          - Lambda.ServiceException
          - Lambda.Unknown
  GetChatUpdate:
    Type: Pass
    Next: UpdateItem
    ResultPath: $.DYNAMODB
    Parameters:
      TableName: ${table_name}
      UpdateExpression: SET BODY = :BODY, EXECUTION_ID = :EXECUTION_ID, HEADERS = :HEADERS, STATUS_CODE = :STATUS_CODE, TS = :TS
      ExpressionAttributeValues:
        ":BODY":
          S.$: $.HTTP.body
        ":EXECUTION_ID":
          S.$: $$.Execution.Id
        ":HEADERS":
          S.$: $.HTTP.headers
        ":STATUS_CODE":
          S.$: $.HTTP.statusCode
        ":TS":
          S.$: $.HTTP.body.ts
      Key:
        GUID:
          S.$: States.Format('{}/{}/{}/{}', $.SLACK.APP_ID, $.SLACK.TEAM_ID, $.SLACK.CHANNEL_ID, $.POST.NAME)
        SORT:
          S: SLACK/POST
  GetWebhookUpdate:
    Type: Pass
    Next: UpdateItem
    ResultPath: $.DYNAMODB
    Parameters:
      TableName: ${table_name}
      UpdateExpression: SET BODY = :BODY, EXECUTION_ID = :EXECUTION_ID, HEADERS = :HEADERS, STATUS_CODE = :STATUS_CODE
      ExpressionAttributeValues:
        ":BODY":
          S.$: $.HTTP.body
        ":EXECUTION_ID":
          S.$: $$.Execution.Id
        ":HEADERS":
          S.$: $.HTTP.headers
        ":STATUS_CODE":
          S.$: $.HTTP.statusCode
      Key:
        GUID:
          S.$: States.Format('{}/{}/{}/{}', $.SLACK.APP_ID, $.SLACK.TEAM_ID, $.SLACK.CHANNEL_ID, $.POST.NAME)
        SORT:
          S: SLACK/POST
  UpdateItem:
    Type: Task
    Resource: arn:aws:states:::aws-sdk:dynamodb:updateItem
    Next: OK?
    InputPath: $.DYNAMODB
    ResultPath: $.DYNAMODB
    Parameters:
      TableName.$: $.TableName
      UpdateExpression.$: $.UpdateExpression
      ExpressionAttributeValues.$: $.ExpressionAttributeValues
      Key.$: $.Key
    Retry:
      - BackoffRate: 2
        IntervalSeconds: 3
        MaxAttempts: 4
        ErrorEquals:
          - DynamoDD.InternalServerErrorException
  OK?:
    Type: Choice
    Default: Fail
    Choices:
      - Next: Succeed
        And:
          - Variable: $.HTTP.statusCode
            StringEquals: "200"
          - Variable: $.HTTP.body
            StringEquals: ok
      - Next: Succeed
        And:
          - Variable: $.HTTP.statusCode
            StringEquals: "200"
          - Variable: $.HTTP.body.ok
            IsPresent: true
          - Variable: $.HTTP.body.ok
            BooleanEquals: true
  Succeed:
    Type: Succeed
  Fail:
    Type: Fail
